name = "ai-agent-team"
main = "src/main/js/index.ts"
compatibility_date = "2024-01-01"
account_id = "2fb92a078e2e1ae3f309523fcc76b173"

# ==========================================
# Custom Domain Configuration
# ==========================================
# Primary API endpoint: api.shyangtsuen.xyz
# Admin interface: admin.shyangtsuen.xyz (future)
# Knowledge base: kb.shyangtsuen.xyz (future)

# ==========================================
# Workers Configuration
# ==========================================
[vars]
ENVIRONMENT = "development"
LOG_LEVEL = "info"
DOMAIN = "shyangtsuen.xyz"
# Genesis Observability - Track all LLM usage
ENABLE_OBSERVABILITY = "true"
OBSERVABILITY_API_URL = "https://obs-edge.flymorris1230.workers.dev/ingest"
OBSERVABILITY_API_KEY = "a590aec22adeab9bb9fcf8ff81ccf790a588a298edeffce3216b317c18f87f9e"
OBSERVABILITY_PROJECT_ID = "GAC_FactoryOS"

# ==========================================
# D1 Database Bindings
# ==========================================
[[d1_databases]]
binding = "DB"
database_name = "ai-agent-db"
database_id = "99db8f91-db78-451a-bdc8-75dd2cf3f25b"

# ==========================================
# Vectorize Bindings (for RAG)
# ==========================================
[[vectorize]]
binding = "VECTORIZE"
index_name = "ai-agent-vectors"

# ==========================================
# R2 Storage Bindings
# ==========================================
# Note: R2 needs to be enabled in Cloudflare Dashboard first
# ✅ ENABLED - Create bucket 'ai-agent-files' in Dashboard before deployment
[[r2_buckets]]
binding = "STORAGE"
bucket_name = "ai-agent-files"

# ==========================================
# KV Namespace Bindings (for caching)
# ==========================================
[[kv_namespaces]]
binding = "CACHE"
id = "ac78ef75b22f417d806008d1c948d33e"

# ==========================================
# Queue Bindings (for task processing)
# ==========================================
# Note: Queues require Workers Paid plan
# ✅ ENABLED - For async task processing
[[queues.producers]]
binding = "TASK_QUEUE"
queue = "ai-agent-tasks"

[[queues.consumers]]
queue = "ai-agent-tasks"
max_batch_size = 10
max_batch_timeout = 30

[[queues.producers]]
binding = "BACKUP_QUEUE"
queue = "ai-agent-backup"

[[queues.consumers]]
queue = "ai-agent-backup"
max_batch_size = 5
max_batch_timeout = 60

# ==========================================
# Cron Triggers (for scheduled tasks)
# ==========================================
# Note: Cron triggers require Workers Paid plan ($5/month)
# ✅ ENABLED - Using Cloudflare Cron for automated scheduling
#
[triggers]
crons = [
  "*/5 * * * *",   # Database sync every 5 minutes
  "*/30 * * * *",  # Task distribution every 30 minutes
  "0 2 * * *",     # Daily full backup at 2 AM
  "0 */6 * * *",   # R2 sync every 6 hours
]

# ==========================================
# Build Configuration
# ==========================================
[build]
command = "npm run build"

# ==========================================
# Development Configuration
# ==========================================
[env.development]
vars = { ENVIRONMENT = "development", LOG_LEVEL = "debug" }

[[env.development.d1_databases]]
binding = "DB"
database_name = "ai-agent-db-dev"
database_id = "ad1c82b8-d27a-4a48-9a4b-e72fa8b31eec"

# ==========================================
# Production Configuration
# ==========================================
[env.production]
name = "ai-agent-team-prod"
vars = { ENVIRONMENT = "production", LOG_LEVEL = "info", DOMAIN = "shyangtsuen.xyz" }

# Custom domain routes for production
# After deployment, run: npx wrangler deployments domains add api.shyangtsuen.xyz
routes = [
  { pattern = "api.shyangtsuen.xyz/*", zone_name = "shyangtsuen.xyz" }
]

[[env.production.d1_databases]]
binding = "DB"
database_name = "ai-agent-db-prod-v1"
database_id = "22076fb8-45e3-4b90-b6cb-98d5f23b369c"

[[env.production.kv_namespaces]]
binding = "CACHE"
id = "ac78ef75b22f417d806008d1c948d33e"

[[env.production.r2_buckets]]
binding = "STORAGE"
bucket_name = "ai-agent-files"

[[env.production.queues.producers]]
binding = "TASK_QUEUE"
queue = "ai-agent-tasks"

[[env.production.queues.producers]]
binding = "BACKUP_QUEUE"
queue = "ai-agent-backup"

[[env.production.vectorize]]
binding = "VECTORIZE"
index_name = "ai-agent-vectors"

# ==========================================
# Staging Configuration (Optional)
# ==========================================
[env.staging]
name = "ai-agent-team-staging"
vars = { ENVIRONMENT = "staging", LOG_LEVEL = "debug", DOMAIN = "shyangtsuen.xyz" }

routes = [
  { pattern = "api-staging.shyangtsuen.xyz/*", zone_name = "shyangtsuen.xyz" }
]

[[env.staging.d1_databases]]
binding = "DB"
database_name = "ai-agent-db-dev"
database_id = "ad1c82b8-d27a-4a48-9a4b-e72fa8b31eec"

# ==========================================
# Limits and Performance
# ==========================================
limits = { cpu_ms = 50000 }
